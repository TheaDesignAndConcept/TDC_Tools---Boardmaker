# Import necessary modules
import bpy
import bmesh
import math
import mathutils
import random

# Define constants
PLANK_WIDTH = 130 / 1000
GAP = 0.5 / 1000
MIN_LENGTH = 0.6
MAX_LENGTH = 4.2
THICKNESS = 0.019

# Function to check mesh and apply color
def check_mesh_and_apply_color(obj, color):
    if obj.data is not None and isinstance(obj.data, bpy.types.Mesh):
        if len(obj.data.vertex_colors) == 0:
            obj.data.vertex_colors.new()

        # Get the vertex color layer
        color_layer = obj.data.vertex_colors.active

        # Assign the color to each vertex
        for poly in obj.data.polygons:
            for loop_index in poly.loop_indices:
                color_layer.data[loop_index].color = color

# Get the currently selected object
selected_object = bpy.context.active_object

# Check if an object is selected
if selected_object is not None:
    # Move the origin to the center of mass and apply scale and rotation
    bpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_MASS', center='MEDIAN')
    bpy.ops.object.transform_apply(location=False, rotation=True, scale=True)

    # Function to calculate the remaining length of the board
    def calculate_remaining_length(board, y_length):
        board_length = board.dimensions.y
        remaining_length = y_length - board_length + 20 / 1000  # Add 20mm (converted to meters) to the remaining length
        return remaining_length
    # Check if the selected object is flat
    if math.isclose(selected_object.dimensions.z, 0, abs_tol=0.001):
        x_length = selected_object.dimensions.x

        # Select the original object
        selected_object.select_set(True)
        bpy.context.view_layer.objects.active = selected_object

        # Duplicate the selected object
        bpy.ops.object.duplicate()

        # Rename the duplicate object to "Instance"
        bpy.context.object.name = "Instance"

        # Go to edit mode and perform a limited dissolve
        bpy.ops.object.mode_set(mode='EDIT')
        bpy.ops.mesh.select_all(action='SELECT')
        bpy.ops.mesh.dissolve_limited()
        bpy.ops.object.mode_set(mode='OBJECT')

        # Select all faces of the object and extrude them up on the Z axis by 200mm
        bpy.ops.object.mode_set(mode='EDIT')
        bpy.ops.mesh.select_all(action='SELECT')
        bpy.ops.mesh.extrude_region_move(TRANSFORM_OT_translate={"value": (0, 0, 0.2)})
        bpy.ops.object.mode_set(mode='OBJECT')

        # Move the object down on the Z axis by 100mm
        bpy.context.object.location.z -= 0.1

        # Deselect all objects
        bpy.ops.object.select_all(action='DESELECT')

        # Create a new BMesh object and load the selected object's mesh data
        bm = bmesh.new()
        bm.from_mesh(selected_object.data)

        # Calculate the minimum and maximum x-coordinates of the vertices
        edge_x_min = min((selected_object.matrix_world @ v.co).x for v in bm.verts)
        edge_x_max = max((selected_object.matrix_world @ v.co).x for v in bm.verts)

        # Calculate the minimum and maximum y-coordinates of the vertices
        edge_y_min = min((selected_object.matrix_world @ v.co).y for v in bm.verts)
        edge_y_max = max((selected_object.matrix_world @ v.co).y for v in bm.verts)

        # Calculate the length of the y-axis based on the actual geometry of the object
        y_length = edge_y_max - edge_y_min
        # Create a new plane
        bpy.ops.mesh.primitive_plane_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 0), scale=(1, 1, 1))
        plane = bpy.context.active_object

        # Set the dimensions and location of the plane
        plane.dimensions = [PLANK_WIDTH, y_length + 20 / 1000, 0]
        plane.location = selected_object.location
        plane.location.z += selected_object.dimensions.z / 2
        plane.location.y = selected_object.location.y

        # Move the origin of the plane to its edge along the y-axis
        bpy.context.scene.cursor.location = plane.location
        bpy.context.scene.cursor.location.y += plane.dimensions.y / 2
        bpy.ops.object.origin_set(type='ORIGIN_CURSOR')

        # Load the plane's mesh data into a new BMesh object
        bm_plane = bmesh.new()
        bm_plane.from_mesh(plane.data)

        # Calculate the maximum y-coordinate of the plane's vertices
        plane_edge_y_max = max((plane.matrix_world @ v.co).y for v in bm_plane.verts)

        # Calculate the difference between the selected object's and the plane's maximum y-coordinates
        y_diff = edge_y_max - plane_edge_y_max

        # Adjust the plane's y-location
        plane.location.y += y_diff

        # Calculate the number of rows needed for the planks
        total_length = edge_x_max - edge_x_min
        num_rows = int(total_length / (PLANK_WIDTH + GAP))

        # Check if an additional row is needed
        if num_rows * (PLANK_WIDTH + GAP) < x_length:
            num_rows += 1
        # Add an array modifier to the plane
        array_modifier = plane.modifiers.new(name="Array", type='ARRAY')
        array_modifier.fit_type = 'FIXED_COUNT'
        array_modifier.count = num_rows
        array_modifier.use_relative_offset = True
        array_modifier.relative_offset_displace[0] = 1 + GAP / PLANK_WIDTH

        # Set the location of the plane
        plane.location.x = edge_x_min + PLANK_WIDTH / 2

        # Generate a random color
        random_color = [random.random() for _ in range(3)] + [1.0]  # RGB + Alpha

        # Apply the color to the plane
        check_mesh_and_apply_color(plane, random_color)

        # Apply the array modifier
        bpy.ops.object.modifier_apply(modifier=array_modifier.name)

        # Set the name of the plane
        plane.name = 'Floorboards.001'

        # Enter edit mode, select all vertices, and separate them into individual objects
        bpy.ops.object.mode_set(mode='EDIT')
        bpy.ops.mesh.select_all(action='SELECT')
        bpy.ops.mesh.separate(type='LOOSE')
        bpy.ops.object.mode_set(mode='OBJECT')

        # Update the selected object's mesh data and free the BMesh object
        bm.to_mesh(selected_object.data)
        bm.free()

        # Get all objects with 'Floorboards' in their name and sort them by their x-location
        floorboards = sorted((obj for obj in bpy.data.objects if 'Floorboards' in obj.name), key=lambda obj: obj.location.x)

        # Initialize a counter for the board names
        board_counter = 1
        # Assign a new random vertex color to each floorboard
        for board in floorboards:
            # Generate a random color
            random_color = [random.random() for _ in range(3)] + [1.0]  # RGB + Alpha

            # Apply the color to the board
            check_mesh_and_apply_color(board, random_color)

        # Iterate over the floorboards
        for board in floorboards:
            # Set a random length for the board
            random_length = random.uniform(MIN_LENGTH, MAX_LENGTH)
            board.dimensions.y = random_length

            # Apply transformations and set the origin to the center of mass
            bpy.context.view_layer.objects.active = board
            bpy.ops.object.transform_apply(location=False, rotation=True, scale=True)
            bpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_MASS', center='BOUNDS')

            # Move the first board in each row to the opposite end of the selected object's y edge
            board.location.y = edge_y_max - board.dimensions.y / 2

            # Calculate the remaining length
            remaining_length = calculate_remaining_length(board, y_length)
            print(f"Remaining length for {board.name}: {remaining_length}")

            last_board = board
            while remaining_length > 0:
                # Create a new plane
                bpy.ops.mesh.primitive_plane_add(size=1, enter_editmode=False, align='WORLD', location=(0, 0, 0), scale=(1, 1, 1))
                new_board = bpy.context.active_object
                new_board.dimensions = [PLANK_WIDTH, min(random.uniform(MIN_LENGTH, MAX_LENGTH), remaining_length), 0]

                # Apply transformations and set the origin to the center of mass
                bpy.context.view_layer.objects.active = new_board
                bpy.ops.object.transform_apply(location=False, rotation=True, scale=True)
                bpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_MASS', center='BOUNDS')

                # Set the location of the new board
                new_board.location = last_board.location
                new_board.location.y -= last_board.dimensions.y / 2 + new_board.dimensions.y / 2 + GAP

                # Set the name of the new board
                new_board.name = f"Floorboards.{board_counter:03d}"

                # Increment the counter
                board_counter += 1

                # Update the remaining length
                remaining_length -= new_board.dimensions.y + GAP
                last_board = new_board

                # Generate a random color
                random_color = [random.random() for _ in range(3)] + [1.0]  # RGB + Alpha

                # Apply the color to the new board
                check_mesh_and_apply_color(new_board, random_color)
        # Deselect all objects
        bpy.ops.object.select_all(action='DESELECT')

        # Get all objects with 'Floorboards' in their name
        floorboards = [obj for obj in bpy.data.objects if 'Floorboards' in obj.name]

        # Initialize a counter for the board names
        board_counter = 1

        # Rename the separated objects
        for board in floorboards:
            board.name = f"Bool_Boards.{board_counter:03d}"
            board_counter += 1

        # Get the 'Instance' object
        instance_object = bpy.data.objects['Instance']

        # Get all objects with 'Bool_Boards' in their name
        bool_boards = [obj for obj in bpy.data.objects if 'Bool_Boards' in obj.name]

        # Add a Boolean modifier to each 'Bool_Board' and set it to intersect using the 'Instance' object
        for board in bool_boards:
            boolean_modifier = board.modifiers.new(name="Boolean", type='BOOLEAN')
            boolean_modifier.operation = 'INTERSECT'
            boolean_modifier.object = instance_object
        # Apply the Boolean modifier for each 'Bool_Board' object
        for board in bool_boards:
            bpy.context.view_layer.objects.active = board
            bpy.ops.object.modifier_apply(modifier="Boolean")

        # Deselect all objects
        bpy.ops.object.select_all(action='DESELECT')

        # Select all 'Bool_Board' objects
        for obj in bpy.data.objects:
            if 'Bool_Boards' in obj.name:
                obj.select_set(True)

        # Set the active object to the first 'Bool_Board'
        bpy.context.view_layer.objects.active = bpy.data.objects['Bool_Boards.001']

        # Join all selected objects
        bpy.ops.object.join()

        # Rename the joined object to 'TDC_Flooring'
        flooring_counter = 1
        while f"TDC_Flooring.{flooring_counter:03d}" in bpy.data.objects:
            flooring_counter += 1
        bpy.context.object.name = f"TDC_Flooring.{flooring_counter:03d}"

        # Add a Solidify modifier to the 'TDC_Flooring' object
        solidify_modifier = bpy.context.object.modifiers.new(name="Solidify", type='SOLIDIFY')

        # Set the offset to 1 and the thickness to 19mm
        solidify_modifier.offset = 1
        solidify_modifier.thickness = THICKNESS

        # Remove the 'Instance' object
        bpy.data.objects.remove(instance_object, do_unlink=True)

    else:
        print("The selected object is not flat.")
else:
    print("No object is selected.")
